# -*- coding: utf-8 -*-
"""AvaliacaoGestaoAcademica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wL0QfrGc2TjFJ7bbu2p24IkeKsBQooT4
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# üìÇ Caminho do arquivo CSV com as respostas
file_path_csv = "Formulario-Avaliacao-Gestao-Academica-respostas-csv.csv"
df = pd.read_csv(file_path_csv)

# üîÑ Renomear colunas para facilitar a an√°lise (MAIS CLARO)
df.columns = [
    "Timestamp", "Departamento", "TempoServico", "Genero",
    "ApoioDesenvolvimento", "Comunicacao", "DecisoesBeneficas",
    "RecursosAdequados", "OpiniaoValorizada", "AmbientePositivo",
    "Acessibilidade", "PoliticasDefinidas", "ApoioInovacao",
    "SatisfacaoRemuneracao", "SatisfacaoGestao", "ComentariosGerais",
    "ApoioDesenvolvimento2", "AcessibilidadeSugestoes", "Infraestrutura",
    "AmbienteColaborativo", "ApoioConferencias", "CompromissoQualidade",
    "ApoioInovacao2", "ComentariosFinais"
]

# ‚ùå Remover colunas irrelevantes para a an√°lise quantitativa
df = df.drop(columns=["Timestamp", "ComentariosGerais", "ComentariosFinais"], errors="ignore")

# üî¢ Converter respostas textuais em valores num√©ricos usando replace() (mais r√°pido)
conversion_dict = {
    "1 - Discordo totalmente": 1,
    "2 - Discordo parcialmente": 2,
    "3 - Neutro": 3,
    "4 - Concordo parcialmente": 4,
    "5 - Concordo totalmente": 5
}

df.replace(conversion_dict, inplace=True)

# ‚è≥ Padronizar "TempoServico" para an√°lise
tempo_servico_mapping = {
    "1 a 5 anos": "1-5 anos",
    "Mais de 5 anos": "5+ anos"
}
df["TempoServico"] = df["TempoServico"].replace(tempo_servico_mapping)

# üìä Criar diret√≥rio para armazenar gr√°ficos
output_dir = "graficos_avaliacao"
os.makedirs(output_dir, exist_ok=True)

# üîπ Fun√ß√£o para gerar e salvar gr√°ficos (MELHORADA)
def gerar_graficos(coluna):
    print(f"üìä Gerando gr√°ficos para: {coluna}")

    # üìä Gr√°fico de barras para colunas categ√≥ricas (e.g., Departamento, G√™nero)
    if df[coluna].dtype == "object":
        fig_bar = os.path.join(output_dir, f"{coluna}_bar.png")
        plt.figure(figsize=(8, 6))
        df[coluna].value_counts().sort_values().plot(kind="barh", color="skyblue")
        plt.title(f"Distribui√ß√£o por {coluna}")
        plt.xlabel("Frequ√™ncia")
        plt.ylabel(coluna)
        plt.savefig(fig_bar, bbox_inches="tight")  # Ajusta para evitar cortes
        plt.close()

    # üìà Histograma e Boxplot para colunas num√©ricas (e.g., respostas das perguntas)
    if df[coluna].dtype in ["int64", "float64"]:
        # Histograma
        fig_hist = os.path.join(output_dir, f"{coluna}_hist.png")
        plt.figure(figsize=(8, 6))
        sns.histplot(df[coluna], bins=5, kde=True, color="royalblue")
        plt.title(f"Distribui√ß√£o das Respostas - {coluna}")
        plt.xlabel("N√≠vel de Concord√¢ncia")
        plt.ylabel("Frequ√™ncia")
        plt.xticks(range(1, 6))
        plt.savefig(fig_hist)
        plt.close()

        # Boxplot
        fig_box = os.path.join(output_dir, f"{coluna}_boxplot.png")
        plt.figure(figsize=(8, 6))
        sns.boxplot(x=df[coluna], color="skyblue")
        plt.title(f"Varia√ß√£o das Respostas - {coluna}")
        plt.xlabel("N√≠vel de Concord√¢ncia")
        plt.savefig(fig_box)
        plt.close()

# üîÑ Loop para gerar gr√°ficos para todas as colunas (EXCETO "Coment√°rios")
for coluna in df.columns:
    gerar_graficos(coluna)

print("‚úÖ Todos os gr√°ficos foram gerados e salvos na pasta 'graficos_avaliacao'.")